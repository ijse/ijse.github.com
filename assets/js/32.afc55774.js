(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{292:function(t,e,n){"use strict";n.r(e);var i=n(38),s=Object(i.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("在一些需求场景中，给定一个固定尺寸的容器，里面文字尺寸随内容的长短自动调整尺寸，以最大化显示，如下效果：\n")]),n("p",{attrs:{id:"pDWHWzf"}},[n("img",{staticClass:"alignnone size-full wp-image-221 ",attrs:{src:"/uploads/img_591eb340c4cdc.png",alt:""}})]),t._v(" "),n("p"),t._v(" "),n("p",[t._v("如果容器尺寸及内容都是不确定的动态值，CSS3 并没有直接可以实现的属性，所以估计需要借助JS，一般思路是：\n"),n("ol",[n("li",[t._v("JS获取容器尺寸")]),t._v(" "),n("li",[t._v("JS获取文字长度，计算文字最大尺寸")]),t._v(" "),n("li",[t._v("调整文字显示")])]),t._v("\n但如果容器尺寸长度是100%, 是动态适应父容器的，怎么办？ 重新计算？怎样获取文字显示尺寸？不同字体怎么办？")]),t._v(" "),n("p",[t._v("问题看起来挺棘手，又涉及到JS操作和计算，方案也不clean。")]),t._v(" "),n("p",[t._v("经过一番搜索，最后总结出了相对可能靠谱的两个方案：\n")]),n("h1",[t._v("SVG text方案")]),t._v("\nSVG 是很强大的方案，一些炫酷的视觉交互效果都可以用SVG来实现."),n("p"),t._v(" "),n("p",[t._v("但是遗憾的是SVG对文字处理的支持不是很好，比如不支持wrap什么的，同时这种效果也是无法直接实现的，还是需要借助JS。（用foreignObject也不行，无论是CSS还是SVG，目前都无沅直接控制文字占用尺寸）")]),t._v(" "),n("p",[t._v("以下是示例代码：\n"),n("pre",{staticClass:"lang:js decode:true"},[t._v("const updateSize = function () {\nconst svg = document.querySelector('svg')\nconst text = document.querySelector('text')\nconst [ svgWidth, svgHeight ] = [\nsvg.getAttribute('width'),\nsvg.getAttribute('height')\n]\nconst { width, height } = text.getBBox()\nconst ratio = Math.min(svgWidth / width, svgHeight / height)\nconst fontSize = 100 * ratio + '%'\ntext.setAttribute('font-size', fontSize)\n}")]),t._v("\nJS代码获取SVG和TEXT的尺寸，然后对fontSize做调整。如果不希望文字太满，也可以将100替换为其它值，如90。")]),t._v(" "),n("p",[t._v("相应的SVG代码：\n"),n("pre",{staticClass:"lang:xhtml decode:true"},[t._v('<svg width="350" height="120">\n<text fill="#000" x="50%" y="50%"\ntext-anchor="middle"\nalignment-baseline="central">\nSample\n</text>\n</svg>')]),t._v("\n这是最简代码，其中"),n("code",[t._v("text-anchor")]),t._v("和"),n("code",[t._v("alignment-baseline")]),t._v("属性用于对text文字的定位进行调整，使其居中显示。")]),t._v(" "),n("p",[t._v("当SVG的尺寸变化时，需要重新调用"),n("code",[t._v("updateSize()进行重绘，当然，也可以通过监听DOMSubtreeModified事件实现当text变化时自动调用。")])]),t._v(" "),n("img",{staticClass:"size-full wp-image-223 aligncenter",attrs:{src:"/uploads/img_591ef02208660.png",alt:""}}),t._v(" "),n("p",{attrs:{id:"kxzamgw"}},[n("img",{staticClass:"size-full wp-image-224 aligncenter",attrs:{src:"/uploads/img_591ef041ba204.png",alt:""}})]),t._v(" "),n("h1",[t._v("Canvas 方案")]),t._v("\n这种方案理论上也是可以实现，但相比SVG方案也并不会简单太多。思路大致是：\n"),n("ol",[n("li",[t._v("JS获取容器尺寸")]),t._v(" "),n("li",[t._v("准备画布，计算位置和文字尺寸")]),t._v(" "),n("li",[t._v("画文字")])]),t._v("\n这种方案也有缺点：文字无法选中和复制，放大可能会有模糊等问题，以及无法较方便地响应交互。\n")])},[],!1,null,null,null);e.default=s.exports}}]);
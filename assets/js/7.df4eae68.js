(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{322:function(n,e,t){"use strict";t.r(e);var r=t(23),a=Object(r.a)({},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"singleton-单例模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#singleton-单例模式","aria-hidden":"true"}},[n._v("#")]),n._v(" Singleton 单例模式")]),n._v(" "),t("pre",[t("code",[n._v('var bird = {\n    type: "Red",\n    fly: function() {\n        console.log( "Weeeee!" );\n    },\n    destroy: function() {\n        console.log( "Hasta la vista, baby!" );\n    }\n};\n')])]),n._v(" "),t("h1",{attrs:{id:"factory-工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#factory-工厂模式","aria-hidden":"true"}},[n._v("#")]),n._v(" Factory 工厂模式")]),n._v(" "),t("p",[n._v("工厂模式是一种不使用"),t("code",[n._v("new")]),n._v("关键字创建对象的方式，抽象出了创建对象这一动作。")]),n._v(" "),t("pre",[t("code",[n._v('var Bird = function() {};\nBird.factory = function( type ) {\n    var bird;\n    if ( typeof Bird[ type ] === "function" ) {\n        bird = new Bird[ type ]();\n    }\n    return bird;\n};\n \nBird.Red = function() {};\nBird.Blue = function() {};\n \nvar redBird = Bird.factory( "Red" );\nvar blueBird = Bird.factor( "Blue" );\n')])]),n._v(" "),t("h1",{attrs:{id:"bridge-桥接模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bridge-桥接模式","aria-hidden":"true"}},[n._v("#")]),n._v(" Bridge 桥接模式")]),n._v(" "),t("p",[n._v("这个模式可以大大方便代码的单元测试。")]),n._v(" "),t("pre",[t("code",[n._v('// Not Bridged\nvar getUrl = function() {\n    var url = $( this ).attr( "href" );\n    \n    $.ajax({\n        url: url,\n        success: function( data ) {\n            console.log( data );\n        }\n    });\n};\n$( "a.ajax" ).on( "click", getUrl );\n \n// Bridged\nvar getUrl = function( url, callback ) {\n    $.ajax({\n        url: url,\n        success: function( data ) {\n            if ( callback ) { callback( data ); }\n        }\n    });\n};\nvar getUrlBridge = function() {\n    var url = $( this ).attr( "href" );\n    \n    getUrl( url, function( data ) {\n        console.log( data );\n    });\n}\n$( "a.ajax" ).on( "click", getUrlBridge );\n')])]),n._v(" "),t("h1",{attrs:{id:"facade-门面模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#facade-门面模式","aria-hidden":"true"}},[n._v("#")]),n._v(" Facade 门面模式")]),n._v(" "),t("p",[n._v("这种模式可以将一些多个版本的方法封装成一个版本来使用，简化调用过程。")]),n._v(" "),t("pre",[t("code",[n._v('// Facade\nvar addEvent = function( element, type, eventHandler ) {\n    if ( element.addEventListener ) {\n        element.addEventListener( type, eventHandler, false );\n    } else if ( elemement.attachEvent ) {\n        element.attachEvent( "on" + type, eventHandler );    \n    }\n};\n')])]),n._v(" "),t("h1",{attrs:{id:"adapter-适配器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#adapter-适配器模式","aria-hidden":"true"}},[n._v("#")]),n._v(" Adapter 适配器模式")]),n._v(" "),t("pre",[t("code",[n._v("/*!\n * jquery-win8-deferred - jQuery $.when that understands WinJS.promise\n * version: 0.1\n * author: appendTo, LLC\n * copyright: 2012\n * license: MIT (http://www.opensource.org/licenses/mit-license)\n * date: Thu, 01 Nov 2012 07:38:13 GMT\n */\n (function () {\n    var $when = $.when;\n    $.when = function () {\n        var args = Array.prototype.slice.call(arguments);\n \n        args = $.map(args, function (arg) {\n            if (arg instanceof WinJS.Promise) {\n                arg = $.Deferred(function (dfd) {\n                    arg.then(\n                        function complete() {\n                            dfd.resolveWith(this, arguments);\n                        }, function error() {\n                            dfd.rejectWith(this, arguments);\n                        }, function progress() {\n                            dfd.notifyWith(this, arguments);\n                        }\n                    );\n                }).promise();\n            }\n \n            return arg;\n        });\n \n        return $when.apply(this, args);\n    };\n}());\n")])]),n._v(" "),t("h1",{attrs:{id:"observer-观察者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#observer-观察者模式","aria-hidden":"true"}},[n._v("#")]),n._v(" Observer 观察者模式")]),n._v(" "),t("p",[n._v("这种模式非常有用，可以用它来与其它组件解耦，比较不错的有"),t("a",{attrs:{href:"https://github.com/postaljs/postal.js",target:"_blank",rel:"noopener noreferrer"}},[n._v("postal.js"),t("OutboundLink")],1),n._v(" 库")]),n._v(" "),t("pre",[t("code",[n._v('var channel = postal.channel( "game" );\n \nchannel.subscribe( "bird.attack", function( data ) {\n    console.log( "Geronimo!" );\n});\n \nchannel.subscribe( "pig.collide", function( impact ) {\n    if ( impact > 100 ) {\n        console.log( "AHHHHHHH!" );\n    }\n});\n \nchannel.publish( "bird.attack", { angle: 45 } );\n')])])])},[],!1,null,null,null);e.default=a.exports}}]);
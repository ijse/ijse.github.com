(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{342:function(e,t,n){"use strict";n.r(t);var o=n(27),r=Object(o.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("WebSocket 协议本质上是一个基于 TCP 的协议。为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息”Upgrade: WebSocket”表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。")]),e._v(" "),n("p",[e._v("WebSocket不是一个新技术，只是HTML5规范中规定了一些接口，浏览器实现，供我们调用，然后通过一种特定的报文格式与后端通信，本质上其实是Socket通信")]),e._v(" "),n("p",[e._v("相比HTTP协议的几个问题：")]),e._v(" "),n("ol",[n("li",[e._v("为一个WEB客户端潜在的建产多个TCP连接。")]),e._v(" "),n("li",[e._v("HTTP头信息臃肿，每次传输都附带。")]),e._v(" "),n("li",[e._v("基于请求-响应模式，HTTP服务端不能主动推送(push)数据到客户端。")])]),e._v(" "),n("p",[e._v("WebSocket有这么些个好处:")]),e._v(" "),n("ol",[n("li",[e._v("只建立一个TCP连接")]),e._v(" "),n("li",[e._v("服务器端与客户端可以互相推送数据")]),e._v(" "),n("li",[e._v("轻量级的头信息，减少数据量")]),e._v(" "),n("li",[e._v("接口简单，实现方便")])]),e._v(" "),n("h2",{attrs:{id:"websocket-握手协议"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#websocket-握手协议","aria-hidden":"true"}},[e._v("#")]),e._v(" WebSocket 握手协议")]),e._v(" "),n("pre",[n("code",[e._v("客户端到服务端： \nGET ws://localhost:8090/TestWebSocket/test.do HTTP/1.1\nPragma: no-cache\nOrigin: http://localhost:8090\nHost: localhost:8090\nSec-WebSocket-Key: kvapOIVORIYg1uWM5UeawQ==\nUpgrade: websocket\nSec-WebSocket-Extensions: x-webkit-deflate-frame\nCache-Control: no-cache\nConnection: Upgrade\nSec-WebSocket-Version: 13\n\n服务端到客户端：\nHTTP/1.1 101 Switching Protocols\nDate: Sun, 21 Apr 2013 10:09:43 GMT\nSec-WebSocket-Accept: GwjLfGrMUKdi2yDFRnqncUhuXwQ=\nServer: Apache-Coyote/1.1\nConnection: upgrade\nUpgrade: websocket\n")])]),e._v(" "),n("p",[e._v("其中，"),n("code",[e._v("Upgrade:websocket")]),e._v(" 表示客户端请求将通信协议由HTTP升级为WebSocket, 然后浏览器与服务器端会通过这个"),n("code",[e._v("Sec-WebSocket-Key")]),e._v("和"),n("code",[e._v("Sec-WebSocket-Accept")]),e._v("来进行握手协议，建立连接。")]),e._v(" "),n("p",[e._v("连接建立成功后，从Chrome的Network面板中可以看到这个请求一直处于Pending状态，表示与服务器端一直在连接着，可随时发送和接收数据。")]),e._v(" "),n("h2",{attrs:{id:"java服务器端"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java服务器端","aria-hidden":"true"}},[e._v("#")]),e._v(" JAVA服务器端")]),e._v(" "),n("p",[e._v("Tomcat对WebSocket做了支持，可以编写继承自WebSocketServlet的Servlet, 然后用MessageInbound或StreamInbound来处理消息。较新版本的tomcat还可以直接获取到请求的request，从而操作Session。")]),e._v(" "),n("p",[e._v("我只试了在Tomcat7.0.32版本，更低的没试。因为WebSocket的标准也不太稳定，所以最好还是选用较新版本的Tomcat。")]),e._v(" "),n("p",[e._v("测试源码在这儿：")]),e._v(" "),n("h2",{attrs:{id:"浏览器端"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器端","aria-hidden":"true"}},[e._v("#")]),e._v(" 浏览器端")]),e._v(" "),n("p",[e._v("较高版本的Chrome中内置了"),n("code",[e._v("WebSocket")]),e._v("对象，使用方法大致可以描述为：new一个WebSocket对象，然后添加一些事件处理方法，发送消息，关闭连接，如：")]),e._v(" "),n("pre",[n("code",[e._v('<script>\nvar ws = new WebSocket("ws://localhost:8090/TestWebSocket/test.do");\nws.onopen = function(evt) {\n\t// 建立连接时...\n    alert("open");\n};\nws.onerror = function(evt) {\n\t// 异常时...\n    alert("error!!");\n}\nws.onclose = function(evt) {\n\t// 断开连接时...\n}\nws.onmessage = function(data) {\n\t// 接收数据...\n    console.log(data);\n}\n\n// 发送数据\nws.send("xxx");\n\n// 断开连接\nws.close();\n<\/script>\n')])]),e._v(" "),n("p",[e._v("WebSocket同样也可以发送二进制数据，可以直接send()一个Blob对象。前端调用起来还是蛮简单的。")]),e._v(" "),n("h2",{attrs:{id:"有关nginx转发配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#有关nginx转发配置","aria-hidden":"true"}},[e._v("#")]),e._v(" 有关Nginx转发配置")]),e._v(" "),n("p",[e._v("常常，我们可能需要使用Nginx来配置反向代理。但"),n("code",[e._v("Upgrade")]),e._v("和"),n("code",[e._v("Connection")]),e._v("这两个HTTP 头不是End-to-end类型的头，它在"),n("a",{attrs:{href:"http://tools.ietf.org/html/rfc2616#section-13.5.1",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),n("OutboundLink")],1),e._v("被明确定义成了Hop-by-hop类型的，也就意味着它不会被代理服务器默认转发，不会被缓存。")]),e._v(" "),n("p",[n("a",{attrs:{href:"http://nginx.org/en/docs/http/websocket.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nginx的文档"),n("OutboundLink")],1),e._v("表示 ，需要手动地明确这两个头，即为每一次请求转发手动为其赋值，如下：")]),e._v(" "),n("pre",[n("code",[e._v('location /chat/ {\n    proxy_pass http://backend;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection "upgrade";\n}\n')])]),e._v(" "),n("h2",{attrs:{id:"其它一些资源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其它一些资源","aria-hidden":"true"}},[e._v("#")]),e._v(" 其它一些资源")]),e._v(" "),n("p",[e._v("在线连接Demo "),n("a",{attrs:{href:"http://www.websocket.org/echo.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.websocket.org/echo.html"),n("OutboundLink")],1)])])},[],!1,null,null,null);t.default=r.exports}}]);